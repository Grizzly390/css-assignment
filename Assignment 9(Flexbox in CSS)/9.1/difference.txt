Q1. Describe the main difference between the CSS Flexbox layout model and the CSS Grid layout model. When
would you choose to use onee over the other?

CSS Flexbox:
1. One-Dimensional Layout: Flexbox is primarily designed for one-dimensional layouts, meaning it excels at arranging elements along either a horizontal or vertical axis, but not both simultaneously.

2. Content-Centric: It's great for situations where we want items to adjust their sizes based on content or available space. This makes it useful for creating flexible, content-driven layouts.

3. Direction Control: We can easily switch between horizontal and vertical layouts by changing the main axis direction. This makes it perfect for creating responsive designs where content flows in a single direction.

4. Alignment: While Flexbox provides alignment options, they are more focused on the main axis, and it may require some workarounds for complex alignment needs in both dimensions.

5. Nested Flexboxes: We can nest flex containers within each other, allowing for flexible and scalable components. For instance, We can have a list of items, and each item can have its own flexbox layout.


CSS Grid:

1. Two-Dimensional Layout: Grid is designed for two-dimensional layouts. It establishes a grid of rows and columns, giving us precise control over both horizontal and vertical positioning.

2. Grid-Based:  It's perfect for creating layouts that are based on a grid structure, like magazine layouts, image galleries, or any design that requires elements to be positioned both horizontally and vertically.

3. Cell Placement: Grid allows us to place items in specific grid cells, which gives us fine-grained control over their positions. We can even overlap items if needed.

4. Alignment Control: Grid offers robust alignment and spacing controls in both rows and columns, making it suitable for complex layouts with varied alignment requirements.

5. Nested Grids: We can nest grids within other grids, providing a high level of modularity and structure in your layouts. This is especially useful for complex web applications.


When to choose Flexbox over Grid:
1. When we need to align items along a single axis or create a linear flow of elements (e.g., a horizontal menu).

2. When we want items to automatically adjust their size based on content or available space.

3. For simpler, one-dimensional layouts within components.


When to choose Grid over Flexbox:
1. When we need to create complex, two-dimensional layouts with precise control over rows and columns (e.g., magazine-style layouts).

2. For aligning items both horizontally and vertically within a container.

3. When we want to create grids within grids for highly modular and structured layouts.